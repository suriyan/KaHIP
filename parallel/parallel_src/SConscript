#/******************************************************************************
# * SConscript
# *
# * Source of Parallel Label Compress.
# *
# ******************************************************************************
# * Copyright (C) 2013 Christian Schulz <christian.schulz@kit.edu>
# *
# * This program is free software: you can redistribute it and/or modify it
# * under the terms of the GNU General Public License as published by the Free
# * Software Foundation, either version 2 of the License, or (at your option)
# * any later version.
# *
# * This program is distributed in the hope that it will be useful, but WITHOUT
# * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# * more details.
# *
# * You should have received a copy of the GNU General Public License along with
# * this program.  If not, see <http://www.gnu.org/licenses/>.
# *****************************************************************************/


# The main SConscript file for the code.
import platform
import sys
import os

# Get the current platform.
SYSTEM = platform.uname()[0]

Import('env')

libparallel_files = [ 'lib/data_structure/parallel_graph_access.cpp',
                      'lib/data_structure/balance_management.cpp',
                      'lib/data_structure/balance_management_refinement.cpp',
                      'lib/data_structure/balance_management_coarsening.cpp',
                      'lib/parallel_label_compress/node_ordering.cpp',
                      'lib/parallel_contraction_projection/parallel_contraction.cpp',
                      'lib/parallel_contraction_projection/parallel_block_down_propagation.cpp',
                      'lib/parallel_contraction_projection/parallel_projection.cpp',
                      'lib/distributed_partitioning/distributed_partitioner.cpp',
                      'lib/distributed_partitioning/initial_partitioning/initial_partitioning.cpp',
                      'lib/distributed_partitioning/initial_partitioning/distributed_evolutionary_partitioning.cpp',
                      'lib/distributed_partitioning/initial_partitioning/random_initial_partitioning.cpp',
                      'lib/communication/mpi_tools.cpp',
                      'lib/communication/dummy_operations.cpp',
                      'lib/io/parallel_graph_io.cpp',
                      'lib/io/parallel_vector_io.cpp',
                      'lib/tools/random_functions.cpp',
                      'lib/tools/distributed_quality_metrics.cpp'
                       ]


libgraph2bgffiles = [ 'lib/data_structure/parallel_graph_access.cpp',
                      'lib/io/parallel_graph_io.cpp',
                      'lib/data_structure/balance_management.cpp',
                      'lib/data_structure/balance_management_refinement.cpp',
                      'lib/data_structure/balance_management_coarsening.cpp',
                       ]

libedgelistfiles= [ 'lib/data_structure/parallel_graph_access.cpp',
                      'lib/io/parallel_graph_io.cpp',

                      'lib/data_structure/balance_management.cpp',
                      'lib/data_structure/balance_management_refinement.cpp',
                      'lib/data_structure/balance_management_coarsening.cpp'
                  ]

libyahootometis = [ 'lib/data_structure/parallel_graph_access.cpp',
                      'lib/io/parallel_graph_io.cpp',
                      'lib/data_structure/balance_management.cpp',
                      'lib/data_structure/balance_management_refinement.cpp',
                      'lib/data_structure/balance_management_coarsening.cpp'
                  ]

SYSTEMNAME=platform.platform(aliased=0, terse=0)
SYSTEM = platform.uname()[0]
if SYSTEM != 'Darwin':
        try:
                if "supermuc" in os.environ['MYSYSTEMNAME']:
                        env['CXX'] = 'mpiCC'
                        env['CC']  = 'mpicc'
                        env.Append(LINKFLAGS = '-openmp')
                        env.Append(CXXFLAGS = '-msse4.2 -openmp -w')
                        env.Append(CCFLAGS = '-msse4.2 -openmp -w')
                else: 
                        env['CXX'] = 'mpicxx'
                        env['CC']  = 'mpicc'
        except KeyError:
                env['CXX'] = 'mpicxx'
                env['CC']  = 'mpicc'
else:
        env['CXX'] = 'openmpicxx'


if env['program'] == 'toolbox':
        env.Append(CXXFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DTOOLBOX')
        env.Append(CCFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DTOOLBOX')
        env.Program('toolbox', ['app/toolbox.cpp']+libparallel_files, LIBS=['libargtable2','libkahip','gomp','mpi'])


if env['program'] == 'parhip':
        env.Append(CXXFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DPARALLEL_LABEL_COMPRESSION')
        env.Append(CCFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DPARALLEL_LABEL_COMPRESSION')
        env.Program('parhip', ['app/parhip.cpp']+libparallel_files, LIBS=['libargtable2','libkahip','gomp','mpi'])

if env['program'] == 'graph2binary':
        env.Append(CXXFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DPARALLEL_LABEL_COMPRESSION -DGRAPH2DGF')
        env.Append(CCFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DPARALLEL_LABEL_COMPRESSION -DGRAPH2DGF')
        env.Program('graph2binary', ['app/graph2binary.cpp']+libgraph2bgffiles, LIBS=['libargtable2','gomp'])

if env['program'] == 'graph2binary_external':
        env.Append(CXXFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DPARALLEL_LABEL_COMPRESSION -DGRAPH2DGF')
        env.Append(CCFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DPARALLEL_LABEL_COMPRESSION -DGRAPH2DGF')
        env.Program('graph2binary_external', ['app/graph2binary_external.cpp']+libgraph2bgffiles, LIBS=['libargtable2','gomp'])

if env['program'] == 'readbgf':
        env.Append(CXXFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DPARALLEL_LABEL_COMPRESSION')
        env.Append(CCFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DPARALLEL_LABEL_COMPRESSION')
        env.Program('readbgf', ['app/readbgf.cpp']+libgraph2bgffiles, LIBS=['libargtable2','libkahip','gomp'])

if env['program'] == 'edge_list_to_metis_graph':
        env.Append(CXXFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DKRONECKER_GENERATOR_PROGRAM')
        env.Append(CCFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DKRONECKER_GENERATOR_PROGRAM')
                
        env.Program('edge_list_to_metis_graph', ['app/edge_list_to_metis_graph.cpp']+libedgelistfiles, LIBS=['libargtable2','gomp'])

if env['program'] == 'friendster_list_to_metis_graph':
        env.Append(CXXFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DKRONECKER_GENERATOR_PROGRAM')
        env.Append(CCFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DKRONECKER_GENERATOR_PROGRAM')
                
        env.Program('friendster_list_to_metis_graph', ['app/friendster_list_to_metis_graph.cpp']+libedgelistfiles, LIBS=['libargtable2','gomp'])


if env['program'] == 'yahoo_to_metis':
        env.Append(CXXFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DKRONECKER_GENERATOR_PROGRAM')
        env.Append(CCFLAGS = '-DGRAPH_GENERATOR_MPI -DGRAPHGEN_DISTRIBUTED_MEMORY -DKRONECKER_GENERATOR_PROGRAM')
                
        env.Program('yahoo_to_metis', ['app/yahoo_to_metis.cpp']+libyahootometis, LIBS=['libargtable2','gomp'])
